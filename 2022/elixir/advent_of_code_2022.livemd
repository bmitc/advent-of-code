<!-- livebook:{"persist_outputs":true} -->

# Advent of Code 2022

## Introduction

These are solutions for [Advent of Code 2022](https://adventofcode.com/2022) written in Elixir. Elixir [Livebook](https://livebook.dev/) is utilized to create this notebook.

The overall strategy is domain-driven design, in that each puzzle is modeled as a domain using Elixir types and functions. The intent is not to provide "clever" solutions that often utilize some sort of computational trickery but to provide a clear linear path from problem statement, a domain model of the problem, an implementation of that model, and then ultimately a solution. It is considered a failure if the solution does not essentially read like an Elixir encoding of the problem description.

The following are provided:

* Full solutions for each day
* Documented modules, types, and functions
* Typespecs for every type and function
* Tests to help verify refactors that occur after a correct solution is arrived at

It is for these reasons that the solutions are somewhat "verbose", if one really wants to use that term. I don't necessarily because I view these solutions are the minimum form required to provided the necessary function, a perspective of *form equals function*. The solutions provided here are fully industrialized and tend to be quite amenable to refactors, often making the transition from part one to part two quite nice and straightforward.

For the most part, solutions are contained within a single `Day<number>` module. Solution values for the two parts are provided as functions `&part_one/0` and `&part_two/0`. However, some days may drastically alter the solution from part one. In cases such as those, two separate modules for the day, such as `Day<number>.PartOne` and `Day<number>.PartTwo`. Solution values in this case are provided as `&solution/0` in the respective module.

## Utilities

```elixir
defmodule Utilities do
  @moduledoc """
  Provides utility functions to be used across days
  """

  @doc """
  Reads the given day's data file of "day_<zero padded day number>_input.txt" as
  a stream
  """
  @spec readDataStream(integer()) :: Stream.t()
  def readDataStream(day) do
    day_as_string =
      day
      |> Integer.to_string()
      |> String.pad_leading(2, "0")

    Path.join(__DIR__, "../data/day_#{day_as_string}_input.txt")
    |> Path.expand()
    |> File.stream!()
    |> Stream.map(&String.trim/1)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Utilities, <<70, 79, 82, 49, 0, 0, 9, ...>>, {:readDataStream, 1}}
```

## Day 1

```elixir
defmodule Day1 do
  @moduledoc """
  Day 1's solutions
  """

  @doc """
  Map of every elf's list of calories keyed by the index in order of appearance
  in the given data input file
  """
  @spec calories() :: %{(elf_index :: pos_integer()) => elf_calories :: [pos_integer()]}
  def calories() do
    handleChunk = fn chunk ->
      chunk
      |> Enum.reverse()
      |> Enum.map(&String.to_integer/1)
    end

    chunk_fun = fn element, acc ->
      if element == "" do
        # Emit chunk and reset accumulator
        {:cont, handleChunk.(acc), []}
      else
        {:cont, [element | acc]}
      end
    end

    after_fun = fn acc ->
      {:cont, handleChunk.(acc), []}
    end

    Utilities.readDataStream(1)
    |> Stream.chunk_while([], chunk_fun, after_fun)
    |> Stream.with_index()
    |> Enum.into(%{}, fn {value, key} -> {key, value} end)
  end

  @doc """
  Returns the maximum total calories for a single elf
  """
  @spec max_calories() :: pos_integer()
  def max_calories() do
    calories()
    |> Enum.max(fn {_, a}, {_, b} -> Enum.sum(a) >= Enum.sum(b) end)
  end

  @doc """
  Returns a sorted list of tuples containing the elf's index and list of calories.
  The list is sorted by the total sum of each elf's calories.
  """
  @spec sorted_calories() :: [{elf_index :: pos_integer(), elf_calories :: [pos_integer()]}]
  def sorted_calories() do
    calories()
    |> Enum.sort(fn {_, a}, {_, b} -> Enum.sum(a) >= Enum.sum(b) end)
  end

  def part_one() do
    {_elf, calories} = max_calories()
    calories |> Enum.sum()
  end

  def part_two() do
    sorted_calories()
    |> Enum.take(3)
    |> Enum.map(fn {_k, v} -> Enum.sum(v) end)
    |> Enum.sum()
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day1, <<70, 79, 82, 49, 0, 0, 17, ...>>, {:part_two, 0}}
```

```elixir
Day1.calories()
```

<!-- livebook:{"output":true} -->

```
%{
  33 => [1365, 4100, 3131, 3596, 4719, 4250, 4580, 5418, 1687, 6533, 5938, 5865, 4605],
  168 => [17215, 9922, 6402, 19625],
  117 => [14249, 5887, 12930, 2407, 14495],
  246 => [3583, 1792, 5592, 5648, 5637, 3586, 1685, 1042, 4020, 6204, 4111, 4887, 6858],
  175 => [4649, 7673, 4275, 3178, 5322, 4959, 5990, 1480, 5206, 3693],
  219 => [3959, 1907, 5456, 2086, 3711, 5971, 3294, 1861, 2780, 1913, 4832, 5076, 1830],
  12 => [8585, 9072, 3466],
  192 => [5832],
  188 => [5674, 1979, 7064, 2839, 6346, 2751, 1055, 3565, 6608, 2640, 2418],
  157 => [4261, 2686, 1891, 5516, 5035, 1525, 5360, 4027, 3811, 6325, 5813, 4172, 6415],
  132 => [4848, 2725, 1146, 5588, 1671, 4461, 1109, 2933, 1639, 4587, 6680, 1035, 3288],
  73 => [4927, 5047, 12168, 15288, 14202],
  44 => [1273, 2231, 3534, 4970, 1685, 2565, 1847, 5926, 5778, 4919, 4238, 1422, 3945, 1252, 4234],
  183 => [4998, 5114, 4812, 7291, 1189, 1140, 7418, 6180, 3614, 6185, 7174, 4112],
  124 => [7386, 9544, 7237],
  239 => [1071, 25798, 5915],
  170 => [14115, 1542, 17633],
  23 => [5148, 3451, 2735, 12950, 6576, 10785],
  29 => [2150, 2901, 3490, 4291, 8998, 5673, 3623, 3894, 7435],
  47 => [1501, 6913, 4990, 5948, 2597, 5644, 2876, 3515, 4264, 3768, 4731, 3944],
  89 => [8427, 7538, 7405, 6634, 2889, 1705, 7171, 6067, 3737],
  203 => [9432, 11708, 8636, 10825, 5787, 12812],
  61 => [2340, 9011, 8717, 1458, 11325, 4563, 8634],
  30 => [2235, 3164, 1231, 3675, 4188, 4865, 1611, 4652, 6333, 3262, 3124, 6215, 2704, 3183],
  43 => [3162, 4035, 1359, 4364, 2392, 3819, 5132, 4721, 4794, 1622, 4693, 5318, 6089, 1588, 3199],
  163 => [25171, 8046, 4857],
  39 => [2814, 5388, 1641, 1526, 4489, 2291, 2573, 5389, 3109, 3422, 5342, 1461, 3105, 4265],
  131 => [10460, 3439, 10344, 4353, 14564],
  45 => [9120, 13317, 3969, 4758, 13615, 7951],
  242 => [2689, 4455, 3461, 5468, 1308, 1111, 4181, 3832, 1172, 2809, 3782, 2943, 1926, 1470, 5324],
  235 => [3088, 5831, 5452, 2038, 1116, 3670, 3025, 3749, 5040, 2507, 3787, 1674, 4437, 2630, 5239],
  48 => [10132, 19382],
  145 => [1799, 3098, 4398, 3948, 4257, 4112, 1364, 3813, 5036, 3469, 4468, 2531, 1348],
  247 => [9068],
  171 => [3405, 3819, 1079, 2957, 2594, 3639, 1941, 3709],
  197 => [1192, 3957, 4091, 2855, 2872, 3079, 6075, 2858, 5498, 1143, 3565, 5869, 5297, 1698],
  57 => [7534, 2592, 1012, 4760, 2118, 8180, 1054, 3230, 7718],
  143 => [7627, 3776, 7000, 10332, 4325, 3876, 2789, 8333],
  237 => [2821, 7212, 7353, 5102, 3808, 7328, 2741, 1436, 6321, 6249, 6961],
  221 => [2776, 1481, 3775, 5827, 7069, 6834, 2274, 5570, 4355, 5544, ...],
  113 => [10645, 2358, 2163, 4477, 9860, 1345, 3691, 2085],
  225 => [11157, 5983, 7801, 8726, 1466, 4673, 4161],
  26 => [20192, 6831, 10425],
  69 => [9323, 7633, 11404, 5092, 1683, 2705, ...],
  88 => [2817, 26802],
  250 => [5676, 7085, 3867, 9663, ...],
  191 => [7035, 5732, 7114, ...],
  166 => [6177, 7217, ...],
  144 => [7701, ...],
  209 => [...],
  ...
}
```

```elixir
Day1.sorted_calories()
```

<!-- livebook:{"output":true} -->

```
[
  {34, [9739, 11547, 11940, 10268, 11939, 10825, 5522]},
  {224, [24591, 21630, 25260]},
  {75, [69228]},
  {121, [33797, 34907]},
  {148, [13509, 11975, 12287, 10636, 12399, 7668]},
  {158, [24072, 19037, 25145]},
  {46, [66512]},
  {81, [66023]},
  {6, [22590, 17677, 25444]},
  {151, [5490, 4786, 4274, 5379, 4549, 4178, 2801, 1439, 5323, 4588, 5163, 1764, 4159, 5876, 5784]},
  {36, [8045, 8298, 5813, 7881, 8605, 4114, 4524, 3837, 7631, 6763]},
  {156, [11372, 15360, 14226, 7483, 16378]},
  {2, [7069, 5792, 1519, 7380, 7034, 6203, 5706, 1850, 4933, 5562, 3826, 6661]},
  {24, [5578, 5978, 5716, 4026, 1429, 7684, 6552, 7630, 5834, 4936, 7936]},
  {0, [7769, 6798, 11685, 10826, 11807, 5786, 7932]},
  {78, [5366, 3942, 4203, 4337, 4559, 6474, 4586, 5663, 3658, 5700, 6654, 6103, 1057]},
  {83, [18357, 10466, 13614, 19749]},
  {20, [7772, 10595, 6827, 4469, 10385, 3420, 7657, 8950]},
  {31, [5215, 3259, 3550, 4965, 4096, 2036, 4517, 2554, 3266, 5571, 5266, 1466, 5259, 5882, 2782]},
  {183, [4998, 5114, 4812, 7291, 1189, 1140, 7418, 6180, 3614, 6185, 7174, 4112]},
  {203, [9432, 11708, 8636, 10825, 5787, 12812]},
  {180, [4784, 1321, 5487, 6182, 5706, 5460, 5418, 2886, 5906, 6230, 1211, 1325, 3766, 3473]},
  {58, [6017, 3402, 3896, 5801, 4055, 5034, 1063, 3694, 6663, 6079, 4364, 5712, 3366]},
  {65, [2592, 4604, 2710, 2273, 4703, 1705, 5528, 5053, 5556, 1562, 5820, 5347, 2978, 2734, 5782]},
  {186, [5484, 3947, 5030, 6716, 4840, 1353, 3667, 6815, 4884, 5050, 5678, 2224, 3010]},
  {90, [5708, 1287, 1923, 6351, 5986, 3291, 1295, 6439, 3591, 2498, 5135, 2927, 5476, 6504]},
  {201, [8320, 16041, 11934, 10727, 11090]},
  {133, [10223, 9558, 8984, 6259, 8858, 4175, 4696, 4865]},
  {209, [5634, 4583, 6213, 4733, 4093, 4552, 1115, 1413, 3362, 1079, 5891, 5299, 3532, 6085]},
  {15, [3035, 9421, 4497, 1802, 8447, 5675, 7580, 9053, 8004]},
  {237, [2821, 7212, 7353, 5102, 3808, 7328, 2741, 1436, 6321, 6249, 6961]},
  {98, [12541, 15894, 16431, 12428]},
  {17, [2982, 4005, 4036, 6510, 4817, 3958, 5057, 2049, 2603, 1227, 5960, 4043, 5261, 4780]},
  {71, [9990, 12357, 17458, 17411]},
  {162, [2745, 7978, 6573, 5295, 8034, 3894, 1410, 2764, 4644, 7553, 6257]},
  {172, [5027, 7097, 2180, 5866, 6339, 10088, 10331, 10009]},
  {221, [2776, 1481, 3775, 5827, 7069, 6834, 2274, 5570, 4355, 5544, 3954, ...]},
  {157, [4261, 2686, 1891, 5516, 5035, 1525, 5360, 4027, 3811, 6325, ...]},
  {194, [6075, 4309, 6002, 6426, 3744, 3310, 4451, 3076, 1509, ...]},
  {177, [8495, 4414, 7618, 7494, 4141, 10026, 7653, 6703]},
  {43, [3162, 4035, 1359, 4364, 2392, 3819, 5132, ...]},
  {38, [5882, 2097, 3154, 4166, 1556, 3414, ...]},
  {33, [1365, 4100, 3131, 3596, 4719, ...]},
  {125, [6602, 6957, 3141, 3585, ...]},
  {27, [3685, 8863, 1300, ...]},
  {59, [4197, 7022, ...]},
  {53, [7376, ...]},
  {147, [...]},
  {230, ...},
  {...},
  ...
]
```

```elixir
Day1.part_one()
```

<!-- livebook:{"output":true} -->

```
71780
```

```elixir
Day1.part_two()
```

<!-- livebook:{"output":true} -->

```
212489
```

## Day 2

```elixir
defmodule Day2.PartOne do
  @moduledoc """
  Solution to Day 1 Part One
  """

  @typedoc """
  Represents a move in the game of rock, paper, scissors
  """
  @type move() :: :rock | :paper | :scissors

  @typedoc """
  Represents a single round of the game rock, paper, scissors
  """
  @type round() :: %{
          opponent: move(),
          response: move()
        }

  @typedoc """
  Represents the result of a single round of rock, paper, scissors
  """
  @type result() :: :win | :lose | :draw

  @doc """
  Parses a move consisting of "A", "B", "C", "X", "Y", "Z" into the corresponding
  move of `:rock`, `:paper`, or `:scissors`
  """
  @spec parse_move(String.t()) :: move()
  def parse_move(move) do
    case move do
      "A" -> :rock
      "B" -> :paper
      "C" -> :scissors
      "X" -> :rock
      "Y" -> :paper
      "Z" -> :scissors
    end
  end

  @doc """
  List of all rounds
  """
  @spec rounds() :: [round()]
  def rounds() do
    Utilities.readDataStream(2)
    |> Stream.map(fn <<opponent::bytes-size(1)>> <> " " <> response ->
      %{opponent: parse_move(opponent), response: parse_move(response)}
    end)
    |> Enum.to_list()
  end

  @doc """
  Judge the given round to determine if it is a win, loss, or draw for the player
  """
  @spec judge_round(round()) :: result()
  def judge_round(%{opponent: opponent, response: response}) do
    case {opponent, response} do
      {:rock, :rock} -> :draw
      {:rock, :paper} -> :win
      {:rock, :scissors} -> :lose
      {:paper, :rock} -> :lose
      {:paper, :paper} -> :draw
      {:paper, :scissors} -> :win
      {:scissors, :rock} -> :win
      {:scissors, :paper} -> :lose
      {:scissors, :scissors} -> :draw
    end
  end

  @doc """
  Score the round according to the given rubric that calculates a score based upon the
  reponse alone plus a score from the round's result
  """
  @spec score_round(round()) :: pos_integer()
  def score_round(%{opponent: _, response: response} = round) do
    response_score =
      case response do
        :rock -> 1
        :paper -> 2
        :scissors -> 3
      end

    outcome_score =
      case judge_round(round) do
        :win -> 6
        :lose -> 0
        :draw -> 3
      end

    response_score + outcome_score
  end

  @doc """
  A list of all the rounds' scores
  """
  @spec scored_rounds() :: [pos_integer()]
  def scored_rounds() do
    rounds()
    |> Enum.map(&score_round/1)
  end

  def solution(), do: scored_rounds() |> Enum.sum()
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day2.PartOne, <<70, 79, 82, 49, 0, 0, 18, ...>>, {:solution, 0}}
```

```elixir
Day2.PartOne.rounds()
```

<!-- livebook:{"output":true} -->

```
[
  %{opponent: :paper, response: :paper},
  %{opponent: :rock, response: :scissors},
  %{opponent: :scissors, response: :scissors},
  %{opponent: :rock, response: :paper},
  %{opponent: :rock, response: :paper},
  %{opponent: :paper, response: :paper},
  %{opponent: :scissors, response: :paper},
  %{opponent: :rock, response: :paper},
  %{opponent: :paper, response: :paper},
  %{opponent: :paper, response: :paper},
  %{opponent: :rock, response: :paper},
  %{opponent: :paper, response: :scissors},
  %{opponent: :paper, response: :paper},
  %{opponent: :rock, response: :paper},
  %{opponent: :scissors, response: :paper},
  %{opponent: :paper, response: :rock},
  %{opponent: :paper, response: :paper},
  %{opponent: :paper, response: :paper},
  %{opponent: :paper, response: :paper},
  %{opponent: :scissors, response: :paper},
  %{opponent: :paper, response: :paper},
  %{opponent: :rock, response: :paper},
  %{opponent: :paper, response: :paper},
  %{opponent: :rock, response: :paper},
  %{opponent: :paper, response: :paper},
  %{opponent: :scissors, response: :paper},
  %{opponent: :rock, response: :paper},
  %{opponent: :paper, response: :rock},
  %{opponent: :paper, response: :paper},
  %{opponent: :paper, response: :paper},
  %{opponent: :paper, response: :rock},
  %{opponent: :paper, response: :paper},
  %{opponent: :scissors, response: :paper},
  %{opponent: :paper, response: :paper},
  %{opponent: :scissors, response: :scissors},
  %{opponent: :rock, response: :rock},
  %{opponent: :paper, response: :paper},
  %{opponent: :paper, response: :paper},
  %{opponent: :rock, response: :scissors},
  %{opponent: :paper, response: :rock},
  %{opponent: :scissors, response: :paper},
  %{opponent: :scissors, response: :scissors},
  %{opponent: :paper, response: :paper},
  %{opponent: :paper, response: :paper},
  %{opponent: :rock, response: :paper},
  %{opponent: :paper, response: :rock},
  %{opponent: :paper, response: :paper},
  %{opponent: :paper, response: :paper},
  %{opponent: :paper, ...},
  %{...},
  ...
]
```

```elixir
Day2.PartOne.solution()
```

<!-- livebook:{"output":true} -->

```
10404
```

```elixir
defmodule Day2.PartTwo do
  @moduledoc """
  Solution to Day 2 Part Two
  """

  @typedoc """
  Represents a move in the game of rock, paper, scissors
  """
  @type move() :: :rock | :paper | :scissors

  @typedoc """
  Represents the result of a single round of rock, paper, scissors
  """
  @type result() :: :win | :lose | :draw

  @typedoc """
  Represents a single round of the game rock, paper, scissors
  """
  @type round() :: %{
          opponent: move(),
          response: move()
        }

  @typedoc """
  Represents a strategy for a single round of the game rock, paper, scissors
  """
  @type round_strategy() :: %{
          opponent: move(),
          expected_result: result()
        }

  @doc """
  Parses a move consisting of "A", "B", "C", "X", "Y", "Z" into the corresponding
  move of `:rock`, `:paper`, or `:scissors`
  """
  @spec parse_move(String.t()) :: move()
  def parse_move(move) do
    case move do
      "A" -> :rock
      "B" -> :paper
      "C" -> :scissors
    end
  end

  @doc """
  Parses an expected result consisting of "X", "Y", or "Z" into the corresponding
  result of `:win`, `:lose`, or `:draw`
  """
  @spec parse_expected_result(String.t()) :: result()
  def parse_expected_result(move) do
    case move do
      "X" -> :lose
      "Y" -> :draw
      "Z" -> :win
    end
  end

  @doc """
  List of all round stategies
  """
  @spec round_strategies() :: [round_strategy()]
  def round_strategies() do
    Utilities.readDataStream(2)
    |> Stream.map(fn <<opponent::bytes-size(1)>> <> " " <> expected_result ->
      %{
        opponent: parse_move(opponent),
        expected_result: parse_expected_result(expected_result)
      }
    end)
    |> Enum.to_list()
  end

  @doc """
  Judge the given round to determine if it is a win, loss, or draw for the player
  """
  @spec judge_round(round()) :: result()
  def judge_round(%{opponent: opponent, response: response}) do
    case {opponent, response} do
      {:rock, :rock} -> :draw
      {:rock, :paper} -> :win
      {:rock, :scissors} -> :lose
      {:paper, :rock} -> :lose
      {:paper, :paper} -> :draw
      {:paper, :scissors} -> :win
      {:scissors, :rock} -> :win
      {:scissors, :paper} -> :lose
      {:scissors, :scissors} -> :draw
    end
  end

  @doc """
  Score the round according to the given rubric that calculates a score based upon the
  reponse alone plus a score from the round's result
  """
  @spec score_round(round()) :: pos_integer()
  def score_round(%{opponent: _, response: response} = round) do
    response_score =
      case response do
        :rock -> 1
        :paper -> 2
        :scissors -> 3
      end

    outcome_score =
      case judge_round(round) do
        :win -> 6
        :lose -> 0
        :draw -> 3
      end

    response_score + outcome_score
  end

  @doc """
  Convert a strategy to a round by computing which move is required to respond to
  the opponent to guarantee the expected result
  """
  @spec convert_strategy_to_round(round_strategy()) :: round()
  def convert_strategy_to_round(round_strategy) do
    case {round_strategy.opponent, round_strategy.expected_result} do
      {:rock, :win} -> :paper
      {:rock, :lose} -> :scissors
      {:paper, :win} -> :scissors
      {:paper, :lose} -> :rock
      {:scissors, :win} -> :rock
      {:scissors, :lose} -> :paper
      {move, :draw} -> move
    end
    |> create_round_from_strategy(round_strategy)
  end

  # Helper function to create a round strategy map from a round map, which
  # contains the move the player should play
  @spec create_round_from_strategy(move(), round_strategy()) :: round()
  defp create_round_from_strategy(
         response,
         %{opponent: _, expected_result: _} = round_strategy
       ) do
    round_strategy
    |> Map.delete(:expected_response)
    |> Map.put(:response, response)
  end

  @doc """
  A list of all the rounds' scores
  """
  @spec scored_rounds_with_strategy() :: [pos_integer()]
  def scored_rounds_with_strategy() do
    round_strategies()
    |> Enum.map(&convert_strategy_to_round/1)
    |> Enum.map(&score_round/1)
  end

  def solution(), do: scored_rounds_with_strategy() |> Enum.sum()
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day2.PartTwo, <<70, 79, 82, 49, 0, 0, 24, ...>>, {:solution, 0}}
```

```elixir
Day2.PartTwo.round_strategies()
```

<!-- livebook:{"output":true} -->

```
[
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :win, opponent: :rock},
  %{expected_result: :win, opponent: :scissors},
  %{expected_result: :draw, opponent: :rock},
  %{expected_result: :draw, opponent: :rock},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :scissors},
  %{expected_result: :draw, opponent: :rock},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :rock},
  %{expected_result: :win, opponent: :paper},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :rock},
  %{expected_result: :draw, opponent: :scissors},
  %{expected_result: :lose, opponent: :paper},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :scissors},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :rock},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :rock},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :scissors},
  %{expected_result: :draw, opponent: :rock},
  %{expected_result: :lose, opponent: :paper},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :lose, opponent: :paper},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :scissors},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :win, opponent: :scissors},
  %{expected_result: :lose, opponent: :rock},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :win, opponent: :rock},
  %{expected_result: :lose, opponent: :paper},
  %{expected_result: :draw, opponent: :scissors},
  %{expected_result: :win, opponent: :scissors},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :rock},
  %{expected_result: :lose, opponent: :paper},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :draw, opponent: :paper},
  %{expected_result: :lose, ...},
  %{...},
  ...
]
```

```elixir
Day2.PartTwo.solution()
```

<!-- livebook:{"output":true} -->

```
10334
```

## Tests

Writing tests for the solutions is important to re-verify solutions for changes that occur after a solution is first submitted and verified as correct. This ensures the solutions stay correct after refactors.

```elixir
ExUnit.start(autorun: false)

defmodule AdventOfCode.Tests do
  use ExUnit.Case, async: true

  test "Day 1" do
    assert Day1.part_one() == 71780
    assert Day1.part_two() == 212_489
  end

  test "Day 2" do
    assert Day2.PartOne.solution() == 10404
    assert Day2.PartTwo.solution() == 10334
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
..
Finished in 0.01 seconds (0.01s async, 0.00s sync)
2 tests, 0 failures

Randomized with seed 297110
```

<!-- livebook:{"output":true} -->

```
%{excluded: 0, failures: 0, skipped: 0, total: 2}
```
